#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stdbool.h>
#include <ctype.h>
#include "symbol.h"
#include "buffer.h"
#include "parser.h"
#include "ast.h"
#include "utils.h"
#include "stack.h"
#include "lexer.h"

#define DEBUG true

extern symbol_t **pglobal_table;
extern ast_t **past;

int parse_var_type (buffer_t *buffer)
{
  buf_skipblank(buffer);
  char *lexem = lexer_getalphanum(buffer);
  if (strcmp(lexem, "entier") == 0) {
    return AST_INTEGER;
  }
  printf("Expected a valid type. exiting.\n");
  exit(1);
}

/**
 * 
 * (entier a, entier b, entier c) => une liste d'ast_t contenue dans un ast_list_t
 */
ast_list_t *parse_parameters (buffer_t *buffer, symbol_t **table)
{
  ast_list_t *list = NULL;
  buf_skipblank(buffer);
  lexer_assert_openbrace(buffer, "Expected a '(' after function name. exiting.\n");
  
  for (;;) {
    int type = parse_var_type(buffer);

    buf_skipblank(buffer);
    char *var_name = lexer_getalphanum(buffer);
    buf_skipblank(buffer);

    if (sym_search(*table, var_name)) {
      printf("Redeclaration of parameter %s. exiting.\n", var_name);
      exit(1);
    }
    
    ast_t *ast_var = ast_new_variable(var_name, type);
    sym_add(table, sym_new(var_name, SYM_PARAM, ast_var));

    ast_list_add(&list, ast_var);

    char next = buf_getchar(buffer);
    if (next == ')') break;
    if (next != ',') {
      printf("Expected either a ',' or a ')'. exiting.\n");
      exit(1);
    }
  }
  return list;
}

int parse_return_type (buffer_t *buffer, symbol_t **table)
{
  buf_skipblank(buffer);
  lexer_assert_twopoints(buffer, "Expected ':' after function parameters");
  buf_skipblank(buffer);
  char *lexem = lexer_getalphanum(buffer);
  if (strcmp(lexem, "entier") == 0) {
    return AST_INTEGER;
  }
  else if (strcmp(lexem, "rien") == 0) {
    return AST_VOID;
  }
  printf("Expected a valid type for a parameter. exiting.\n");
  exit(1);
}

bool parse_is_type (char *lexem)
{
  if (strcmp(lexem, "entier") != 0) { // si le mot-clé n'est pas "entier", on retourne faux
    return false;
  }
  return true;
}

bool stack_is_smaller (ast_t *ast_top, ast_t *ast_buf) {
  int w_top = ast_binary_priority(ast_top);
  int w_buf = ast_binary_priority(ast_buf);

  if(w_top < w_buf) return true;
  if(w_top > w_buf) return false;
  return false;
}

ast_t *isNbrOp (char chr) 
{
  if(chr >= '0' && chr <= '9') {
    return ast_new_integer((long)chr);
  }
  if(chr == '+' || chr == '-' || chr == '*' || chr == '/') {
    switch (chr)
    {
    case '+':
      return ast_new_binary(AST_BIN_PLUS, NULL, NULL);
      break;
    case '-':
      return ast_new_binary(AST_BIN_MINUS, NULL, NULL);
      break;
    case '*':
      return ast_new_binary(AST_BIN_MULT, NULL, NULL);
      break;
    case '/':
      return ast_new_binary(AST_BIN_DIV, NULL, NULL);
    default:
      return NULL;
      break;
    }
  }
  return NULL;
}

ast_t *parse_expression (buffer_t *buffer)
{
  // TODO :
  /**
   * Push la valeur dans la pile
   * Retirer le top de la pile
   * l'affecter a sortie
   * comparer avec sortie et les valeur suivantes (voir algo !)
   * Puis ensuite, transformer ce qui est dans la "sortie" en arbre.
   * */
  mystack_t exit = NULL;
  mystack_t stack = NULL;
  stack_push(&stack,NULL);

  bool toContinued = true;
  for (;;) {
    ast_t *data = stack_top(stack);
    
    if(toContinued) {
      buf_skipblank(buffer);
      char c = buf_getchar(buffer);
      ast_t *ast_item = isNbrOp(c);
    } else {
      toContinued = true;
    }

    if(stack_is_smaller(data,ast_item)) {
      stack_push(&stack, ast_item);
    } else {
      do {
        ast_t *temp = stack_pop(&stack);
        stack_push(&exit, temp);
      } while (stack_is_smaller(data,temp))
      toContinued = false;

      //char *temp = stack_pop(&stack);
      //printf("add '%c' on exit\n",*temp);
      //stack_push(&exit, temp);
      //data = stack_top(stack);
      //printf("%c VS %c\n",*(char*)data, *(char*)stack_top(exit));
      
      // while(!stack_is_smaller(data,*(char*)stack_top(exit))) {
      //   temp = stack_pop(&stack);
      //   stack_push(&exit,temp);
      //   printf("add '%c' on exit\n",*temp);
      //   data = stack_top(stack);
      //   printf("%c VS %c\n",*(char*)data,c);
      // }
      printf("end of comparaison\n");
    }
  }
      
  return NULL;
}

ast_t *parse_declaration (buffer_t *buffer)
{
  int type = parse_var_type(buffer);
  buf_skipblank(buffer);
  char *var_name = lexer_getalphanum(buffer);
  if (var_name == NULL) {
    printf("Expected a variable name. exiting.\n");
    exit(1);
  }

  ast_t *var = ast_new_variable(var_name, type);
  buf_skipblank(buffer);
  char next = buf_getchar(buffer);
  if (next == ';') {
    
    return ast_new_declaration(var, NULL);
  }
  else if (next == '=') {
    ast_t *expression = parse_expression(buffer, table);
    return ast_new_declaration(var, expression);
  }
  printf("Expected either a ';' or a '='. exiting.\n");
  buf_print(buffer);
  exit(1);
}

ast_t *parse_statement (buffer_t *buffer, symbol_t **table)
{
  buf_skipblank(buffer);
  char *lexem = lexer_getalphanum_rollback(buffer);
  if (parse_is_type(lexem)) {
    // ceci est une déclaration de variable
    return parse_declaration(buffer, table);
  }
  // TODO:
  return NULL;
}

ast_list_t *parse_function_body (buffer_t *buffer, symbol_t **table)
{
  ast_list_t *stmts = NULL;
  buf_skipblank(buffer);
  lexer_assert_openbracket(buffer, "Function body should start with a '{'");
  char next;
  do {
    ast_t *statement = parse_statement(buffer, table);
    ast_list_add(&stmts, statement);
    buf_skipblank(buffer);
    next = buf_getchar_rollback(buffer);
  } while (next != '}');

  return stmts;
}


ast_t *parse_function (buffer_t *buffer)
{
  buf_skipblank(buffer);
  char *lexem = lexer_getalphanum(buffer);
  if (strcmp(lexem, "fonction") != 0) {
    printf("Expected a 'fonction' keyword on global scope.exiting.\n");
    buf_print(buffer);
    exit(1);
  }
  buf_skipblank(buffer);
  // TODO
  char *name = lexer_getalphanum(buffer);
  
  ast_list_t *params = parse_parameters(buffer, table);
  int return_type = parse_return_type(buffer, table);
  ast_list_t *stmts = parse_function_body(buffer, table);

  return ast_new_function(name, return_type, params, stmts);
}

/**
 * This function generates ASTs for each global-scope function
 */
ast_list_t *parse (buffer_t *buffer)
{
  symbol_t *table = NULL;
  ast_t *function = parse_function(buffer, &table);
  ast_print(function);
  if (DEBUG) printf("** end of file. **\n");
  return NULL;
}
